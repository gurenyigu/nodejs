// Buffer 对象类似于数组, 它的元素为 16 进制的两位数, 即 0 - 255 的数值. 示例代码如下:
var str = '深入浅出node.js';
var buf = new Buffer(str, 'utf-8');
console.log(buf); // <Buffer e6 b7 b1 e5 85 a5 e6 b5 85 e5 87 ba 6e 6f 64 65 2e 6a 73>

// 由上面的实例可见, 不同编码的字符串占用的元素个数各不同, 上面代码中的文字在 UTF-8 编码下占用 3 个元素, 字母和半角标点符号占用 1 个元素.

// Buffer 与 Array 类型的关系很近, 可以访问 length 属性得到长度, 也可以通过下标访问元素, 在构造对象时也十分相似, 如下:
var buf = new Buffer(100);
console.log(buf.length); // 100
// 上述代码分配了一个长 100 字节的 Buffer 对象. 可以通过下标访问刚初始化的 Buffer 的元素, 代码如下:
console.log(buf[10]); // 这里会得到一个 0  - 255 的随机值 虽然这么说. 但我测试一直为 0

// 同样的, 我们可以通过下标赋值
buf[10] = 10;
console.log(buf[10]); // 10
// 问题来了, 如果给元素的值不是 0 - 255 的整数而是小数时会怎样
buf[20] = -100;
console.log(buf[20]); // 156
buf[30] = 300;
console.log(buf[30]); // 44
buf[40] = 3.14159;
console.log(buf[40]); // 3
// 给元素赋值如果小于 0, 就将该值逐次加 256, 直到得到一个 0 - 255 之间的整数
// 如果大于 255, 则逐次减去 256, 直到得到 0 - 255 之间的数
// 如果是小数, 舍弃小数部分, 只保留整数部分
